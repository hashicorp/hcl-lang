// Code generated by "stringer -type=CandidateKind -output=candidate_kind_string.go"; DO NOT EDIT.

package lang

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NilCandidateKind-0]
	_ = x[AttributeCandidateKind-1]
	_ = x[BlockCandidateKind-2]
	_ = x[LabelCandidateKind-3]
	_ = x[BoolCandidateKind-4]
	_ = x[KeywordCandidateKind-5]
	_ = x[ListCandidateKind-6]
	_ = x[MapCandidateKind-7]
	_ = x[NumberCandidateKind-8]
	_ = x[ObjectCandidateKind-9]
	_ = x[SetCandidateKind-10]
	_ = x[StringCandidateKind-11]
	_ = x[TupleCandidateKind-12]
	_ = x[TraversalCandidateKind-13]
}

const _CandidateKind_name = "NilCandidateKindAttributeCandidateKindBlockCandidateKindLabelCandidateKindBoolCandidateKindKeywordCandidateKindListCandidateKindMapCandidateKindNumberCandidateKindObjectCandidateKindSetCandidateKindStringCandidateKindTupleCandidateKindTraversalCandidateKind"

var _CandidateKind_index = [...]uint16{0, 16, 38, 56, 74, 91, 111, 128, 144, 163, 182, 198, 217, 235, 257}

func (i CandidateKind) String() string {
	if i >= CandidateKind(len(_CandidateKind_index)-1) {
		return "CandidateKind(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _CandidateKind_name[_CandidateKind_index[i]:_CandidateKind_index[i+1]]
}
